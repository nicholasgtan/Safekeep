// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//TODO Whenever you make changes to your Prisma schema in the future, you manually need to invoke 
//TODO 1. npx prisma migrate dev --name init, 
//TODO 2. npx prisma generate, 
//TODO in order to accommodate the changes in your Prisma Client API.

generator client {
  provider = "prisma-client-js"
  output = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

//* Models
model User {
  id            String  @id @default(uuid())
  email         String  @unique
  firstName     String
  lastName      String
  password      String
  role          Role    @default(client)
  userClient    Client? @relation("UserList", fields: [userClientId], references: [id])
  userClientId  String?
  accRepClient  Client[]
}

enum Role {
  client
  admin
}

model Client {
  id              String @id @default(uuid())
  name            String
  type            String
  account         Account?
  userList        User[] @relation("UserList")
  accountRep      User? @relation(fields: [accountRepId], references: [id])
  accountRepId    String?
}

model Account {
  id String @id @default(uuid())
  cashBalance     BigInt
  equityBalance   BigInt
  fixedIncomeBal  BigInt
  client          Client @relation(fields: [clientId], references: [id])
  clientId        String @unique
  trade           Trade[]
}

model Trade {
  id                String @id @default(uuid())
  tradeDate         DateTime @db.Date
  settlementDate    DateTime @db.Date
  stockType         Stock @default(equity)
  settlementAmt     BigInt
  position          Position @default(buy)    
  onTime            OnTime?
  custodyAccount    Account  @relation(fields: [custodyAccountId], references: [id])
  custodyAccountId  String 
}

enum Stock {
  equity
  fixedIncome
}

enum Position {
  buy
  sell
}

enum OnTime {
  yes
  no
}